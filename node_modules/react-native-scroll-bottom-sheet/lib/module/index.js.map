{"version":3,"sources":["index.tsx"],"names":["interpolateDeprecated","Animated","interpolate","interpolateNode","Easing","EasingNode","EasingDeprecated","FlatListComponentType","ScrollViewComponentType","SectionListComponentType","TimingAnimationType","SpringAnimationType","DEFAULT_SPRING_PARAMS","damping","mass","stiffness","overshootClamping","restSpeedThreshold","restDisplacementThreshold","Dimensions","get","windowHeight","height","IOS_NORMAL_DECELERATION_RATE","ANDROID_NORMAL_DECELERATION_RATE","DEFAULT_ANIMATION_DURATION","DEFAULT_EASING","inOut","linear","imperativeScrollOptions","method","args","index","viewPosition","viewOffset","animated","x","y","itemIndex","sectionIndex","ScrollBottomSheet","props","React","createRef","Value","Number","Platform","OS","Clock","str","split","topInset","snapPoints","map","p","convertPercentageToDp","Error","componentType","FlatList","ScrollView","SectionList","getNormalisedSnapPoints","isManuallySetValue","setValue","manualYOffset","nextSnapIndex","initialSnapIndex","animationType","animationDriver","animationDuration","animationConfig","duration","ScrollComponent","getScrollComponent","scrollComponent","createAnimatedComponent","openPosition","closedPosition","enableOverScroll","length","initialSnap","initialDecelerationRate","select","android","ios","decelerationRate","handleGestureState","handleOldGestureState","drawerGestureState","drawerOldGestureState","lastSnapInRange","prevTranslateYOffset","translationY","lastSnap","onHandleGestureEvent","nativeEvent","dragY","oldState","state","velocityY","onDrawerGestureEvent","onScrollBeginDrag","contentOffset","lastStartScrollY","didHandleGestureBegin","GestureState","ACTIVE","isAnimationInterrupted","BEGAN","isAndroid","animationClock","didGestureFinish","END","isLastSnapPointInRange","i","scrollY","dragWithHandle","didScrollUpAndPullDown","scrollUpAndPullDown","setTranslationY","extraOffset","endOffsetY","friction","calculateNextSnapPoint","tempDestSnapPoint","runAnimation","clock","from","to","position","finished","velocity","frameTime","time","timingConfig","easing","toValue","springConfig","value","prevSnapIndex","onSettle","destSnapPoint","translateYOffset","prevDragY","animationPosition","animationFinished","animationFrameTime","translateY","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","renderHandle","animatedPosition","containerStyle","rest","AnimatedScrollableComponent","normalisedSnapPoints","Content","StyleSheet","absoluteFillObject","transform","drawerHandleRef","masterDrawer","drawerContentRef","scrollComponentRef","styles","container","innerRef","contentContainerStyle","paddingBottom","node","current","getNode","data","sections","setNativeProps","maxDeltaY","Component","create","flex"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2020 Raul Gomez Acuna\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport React, { Component, RefObject } from 'react';\nimport {\n  Dimensions,\n  FlatList,\n  FlatListProps,\n  Platform,\n  ScrollView,\n  ScrollViewProps,\n  SectionList,\n  SectionListProps,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Animated, {\n  abs,\n  add,\n  and,\n  call,\n  Clock,\n  clockRunning,\n  cond,\n  Easing as EasingDeprecated,\n  // @ts-ignore: this property is only present in Reanimated 2\n  EasingNode,\n  eq,\n  event,\n  Extrapolate,\n  greaterOrEq,\n  greaterThan,\n  multiply,\n  not,\n  onChange,\n  or,\n  set,\n  startClock,\n  stopClock,\n  sub,\n  spring,\n  timing,\n  Value,\n} from 'react-native-reanimated';\nimport {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  PanGestureHandlerProperties,\n  State as GestureState,\n  TapGestureHandler,\n} from 'react-native-gesture-handler';\nimport { Assign } from 'utility-types';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-ignore: this property is only present in Reanimated 2\n  interpolateNode,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst Easing: typeof EasingDeprecated = EasingNode ?? EasingDeprecated;\n\nconst FlatListComponentType = 'FlatList' as const;\nconst ScrollViewComponentType = 'ScrollView' as const;\nconst SectionListComponentType = 'SectionList' as const;\nconst TimingAnimationType = 'timing' as const;\nconst SpringAnimationType = 'spring' as const;\n\nconst DEFAULT_SPRING_PARAMS = {\n  damping: 50,\n  mass: 0.3,\n  stiffness: 121.6,\n  overshootClamping: true,\n  restSpeedThreshold: 0.3,\n  restDisplacementThreshold: 0.3,\n};\n\nconst { height: windowHeight } = Dimensions.get('window');\nconst IOS_NORMAL_DECELERATION_RATE = 0.998;\nconst ANDROID_NORMAL_DECELERATION_RATE = 0.985;\nconst DEFAULT_ANIMATION_DURATION = 250;\nconst DEFAULT_EASING = Easing.inOut(Easing.linear);\nconst imperativeScrollOptions = {\n  [FlatListComponentType]: {\n    method: 'scrollToIndex',\n    args: {\n      index: 0,\n      viewPosition: 0,\n      viewOffset: 1000,\n      animated: true,\n    },\n  },\n  [ScrollViewComponentType]: {\n    method: 'scrollTo',\n    args: {\n      x: 0,\n      y: 0,\n      animated: true,\n    },\n  },\n  [SectionListComponentType]: {\n    method: 'scrollToLocation',\n    args: {\n      itemIndex: 0,\n      sectionIndex: 0,\n      viewPosition: 0,\n      viewOffset: 1000,\n      animated: true,\n    },\n  },\n};\n\ntype AnimatedScrollableComponent = FlatList | ScrollView | SectionList;\n\ntype FlatListOption<T> = Assign<\n  { componentType: typeof FlatListComponentType },\n  FlatListProps<T>\n>;\ntype ScrollViewOption = Assign<\n  { componentType: typeof ScrollViewComponentType },\n  ScrollViewProps\n>;\ntype SectionListOption<T> = Assign<\n  { componentType: typeof SectionListComponentType },\n  SectionListProps<T>\n>;\n\ninterface TimingParams {\n  clock: Animated.Clock;\n  from: Animated.Node<number>;\n  to: Animated.Node<number>;\n  position: Animated.Value<number>;\n  finished: Animated.Value<number>;\n  frameTime: Animated.Value<number>;\n  velocity: Animated.Node<number>;\n}\n\ntype CommonProps = {\n  /**\n   * Array of numbers that indicate the different resting positions of the bottom sheet (in dp or %), starting from the top.\n   * If a percentage is used, that would translate to the relative amount of the total window height.\n   * For instance, if 50% is used, that'd be windowHeight * 0.5. If you wanna take into account safe areas during\n   * the calculation, such as status bars and notches, please use 'topInset' prop\n   */\n  snapPoints: Array<string | number>;\n  /**\n   * Index that references the initial resting position of the drawer, starting from the top\n   */\n  initialSnapIndex: number;\n  /**\n   * Render prop for the handle\n   */\n  renderHandle: () => React.ReactNode;\n  /**\n   * Callback that is executed right after the drawer settles on one of the snapping points.\n   * The new index is provided on the callback\n   * @param index\n   */\n  onSettle?: (index: number) => void;\n  /**\n   * Animated value that tracks the position of the drawer, being:\n   * 0 => closed\n   * 1 => fully opened\n   */\n  animatedPosition?: Animated.Value<number>;\n  /**\n   * This value is useful if you want to take into consideration safe area insets\n   * when applying percentages for snapping points. We recommend using react-native-safe-area-context\n   * library for that.\n   * @see https://github.com/th3rdwave/react-native-safe-area-context#usage, insets.top\n   */\n  topInset: number;\n  /**\n   * Reference to FlatList, ScrollView or SectionList in order to execute its imperative methods.\n   */\n  innerRef: RefObject<FlatList | ScrollView | SectionList>;\n  /*\n   * Style to be applied to the container.\n   */\n  containerStyle?: Animated.AnimateStyle<ViewStyle>;\n  /*\n   * Factor of resistance when the gesture is released. A value of 0 offers maximum\n   * acceleration, whereas 1 acts as the opposite. Defaults to 0.95\n   */\n  friction: number;\n  /*\n   * Allow drawer to be dragged beyond lowest snap point\n   */\n  enableOverScroll: boolean;\n};\n\ntype TimingAnimationProps = {\n  animationType: typeof TimingAnimationType;\n  /**\n   * Configuration for the timing reanimated function\n   */\n  animationConfig?: Partial<Animated.TimingConfig>;\n};\n\ntype SpringAnimationProps = {\n  animationType: typeof SpringAnimationType;\n  /**\n   * Configuration for the spring reanimated function\n   */\n  animationConfig?: Partial<Animated.SpringConfig>;\n};\n\ntype Props<T> = CommonProps &\n  (FlatListOption<T> | ScrollViewOption | SectionListOption<T>) &\n  (TimingAnimationProps | SpringAnimationProps);\n\nexport class ScrollBottomSheet<T extends any> extends Component<Props<T>> {\n  static defaultProps = {\n    topInset: 0,\n    friction: 0.95,\n    animationType: 'timing',\n    innerRef: React.createRef<AnimatedScrollableComponent>(),\n    enableOverScroll: false,\n  };\n\n  /**\n   * Gesture Handler references\n   */\n  private masterDrawer = React.createRef<TapGestureHandler>();\n  private drawerHandleRef = React.createRef<PanGestureHandler>();\n  private drawerContentRef = React.createRef<PanGestureHandler>();\n  private scrollComponentRef = React.createRef<NativeViewGestureHandler>();\n\n  /**\n   * ScrollView prop\n   */\n  private onScrollBeginDrag: ScrollViewProps['onScrollBeginDrag'];\n  /**\n   * Pan gesture handler events for drawer handle and content\n   */\n  private onHandleGestureEvent: PanGestureHandlerProperties['onGestureEvent'];\n  private onDrawerGestureEvent: PanGestureHandlerProperties['onGestureEvent'];\n  /**\n   * Main Animated Value that drives the top position of the UI drawer at any point in time\n   */\n  private translateY: Animated.Node<number>;\n  /**\n   * Animated value that keeps track of the position: 0 => closed, 1 => opened\n   */\n  private position: Animated.Node<number>;\n  /**\n   * Flag to indicate imperative snapping\n   */\n  private isManuallySetValue: Animated.Value<number> = new Value(0);\n  /**\n   * Manual snapping amount\n   */\n  private manualYOffset: Animated.Value<number> = new Value(0);\n  /**\n   * Keeps track of the current index\n   */\n  private nextSnapIndex: Animated.Value<number>;\n  /**\n   * Deceleration rate of the scroll component. This is used only on Android to\n   * compensate the unexpected glide it gets sometimes.\n   */\n  private decelerationRate: Animated.Value<number>;\n  private prevSnapIndex = -1;\n  private dragY = new Value(0);\n  private prevDragY = new Value(0);\n  private tempDestSnapPoint = new Value(0);\n  private isAndroid = new Value(Number(Platform.OS === 'android'));\n  private animationClock = new Clock();\n  private animationPosition = new Value(0);\n  private animationFinished = new Value(0);\n  private animationFrameTime = new Value(0);\n  private velocityY = new Value(0);\n  private lastStartScrollY: Animated.Value<number> = new Value(0);\n  private prevTranslateYOffset: Animated.Value<number>;\n  private translationY: Animated.Value<number>;\n  private destSnapPoint = new Value(0);\n\n  private lastSnap: Animated.Value<number>;\n  private dragWithHandle = new Value(0);\n  private scrollUpAndPullDown = new Value(0);\n  private didGestureFinish: Animated.Node<0 | 1>;\n  private didScrollUpAndPullDown: Animated.Node<number>;\n  private setTranslationY: Animated.Node<number>;\n  private extraOffset: Animated.Node<number>;\n  private calculateNextSnapPoint: (\n    i?: number\n  ) => number | Animated.Node<number>;\n\n  private scrollComponent: React.ComponentType<\n    FlatListProps<T> | ScrollViewProps | SectionListProps<T>\n  >;\n\n  convertPercentageToDp = (str: string) =>\n    (Number(str.split('%')[0]) * (windowHeight - this.props.topInset)) / 100;\n\n  constructor(props: Props<T>) {\n    super(props);\n    const { initialSnapIndex, animationType } = props;\n\n    const animationDriver = animationType === 'timing' ? 0 : 1;\n    const animationDuration =\n      (props.animationType === 'timing' && props.animationConfig?.duration) ||\n      DEFAULT_ANIMATION_DURATION;\n\n    const ScrollComponent = this.getScrollComponent();\n    // @ts-ignore\n    this.scrollComponent = Animated.createAnimatedComponent(ScrollComponent);\n\n    const snapPoints = this.getNormalisedSnapPoints();\n    const openPosition = snapPoints[0];\n    const closedPosition = this.props.enableOverScroll\n      ? windowHeight\n      : snapPoints[snapPoints.length - 1];\n    const initialSnap = snapPoints[initialSnapIndex];\n    this.nextSnapIndex = new Value(initialSnapIndex);\n\n    const initialDecelerationRate = Platform.select({\n      android:\n        props.initialSnapIndex === 0 ? ANDROID_NORMAL_DECELERATION_RATE : 0,\n      ios: IOS_NORMAL_DECELERATION_RATE,\n    });\n    this.decelerationRate = new Value(initialDecelerationRate);\n\n    const handleGestureState = new Value<GestureState>(-1);\n    const handleOldGestureState = new Value<GestureState>(-1);\n    const drawerGestureState = new Value<GestureState>(-1);\n    const drawerOldGestureState = new Value<GestureState>(-1);\n\n    const lastSnapInRange = new Value(1);\n    this.prevTranslateYOffset = new Value(initialSnap);\n    this.translationY = new Value(initialSnap);\n\n    this.lastSnap = new Value(initialSnap);\n\n    this.onHandleGestureEvent = event([\n      {\n        nativeEvent: {\n          translationY: this.dragY,\n          oldState: handleOldGestureState,\n          state: handleGestureState,\n          velocityY: this.velocityY,\n        },\n      },\n    ]);\n    this.onDrawerGestureEvent = event([\n      {\n        nativeEvent: {\n          translationY: this.dragY,\n          oldState: drawerOldGestureState,\n          state: drawerGestureState,\n          velocityY: this.velocityY,\n        },\n      },\n    ]);\n    this.onScrollBeginDrag = event([\n      {\n        nativeEvent: {\n          contentOffset: { y: this.lastStartScrollY },\n        },\n      },\n    ]);\n\n    const didHandleGestureBegin = eq(handleGestureState, GestureState.ACTIVE);\n\n    const isAnimationInterrupted = and(\n      or(\n        eq(handleGestureState, GestureState.BEGAN),\n        eq(drawerGestureState, GestureState.BEGAN),\n        and(\n          eq(this.isAndroid, 0),\n          eq(animationDriver, 1),\n          or(\n            eq(drawerGestureState, GestureState.ACTIVE),\n            eq(handleGestureState, GestureState.ACTIVE)\n          )\n        )\n      ),\n      clockRunning(this.animationClock)\n    );\n\n    this.didGestureFinish = or(\n      and(\n        eq(handleOldGestureState, GestureState.ACTIVE),\n        eq(handleGestureState, GestureState.END)\n      ),\n      and(\n        eq(drawerOldGestureState, GestureState.ACTIVE),\n        eq(drawerGestureState, GestureState.END)\n      )\n    );\n\n    // Function that determines if the last snap point is in the range {snapPoints}\n    // In the case of interruptions in the middle of an animation, we'll get\n    // lastSnap values outside the range\n    const isLastSnapPointInRange = (i: number = 0): Animated.Node<number> =>\n      i === snapPoints.length\n        ? lastSnapInRange\n        : cond(\n            eq(this.lastSnap, snapPoints[i]),\n            [set(lastSnapInRange, 1)],\n            isLastSnapPointInRange(i + 1)\n          );\n\n    const scrollY = [\n      set(lastSnapInRange, 0),\n      isLastSnapPointInRange(),\n      cond(\n        or(\n          didHandleGestureBegin,\n          and(\n            this.isManuallySetValue,\n            not(eq(this.manualYOffset, snapPoints[0]))\n          )\n        ),\n        [set(this.dragWithHandle, 1), 0]\n      ),\n      cond(\n        // This is to account for a continuous scroll on the drawer from a snap point\n        // Different than top, bringing the drawer to the top position, so that if we\n        // change scroll direction without releasing the gesture, it doesn't pull down the drawer again\n        and(\n          eq(this.dragWithHandle, 1),\n          greaterThan(snapPoints[0], add(this.lastSnap, this.dragY)),\n          and(not(eq(this.lastSnap, snapPoints[0])), lastSnapInRange)\n        ),\n        [\n          set(this.lastSnap, snapPoints[0]),\n          set(this.dragWithHandle, 0),\n          this.lastStartScrollY,\n        ],\n        cond(eq(this.dragWithHandle, 1), 0, this.lastStartScrollY)\n      ),\n    ];\n\n    this.didScrollUpAndPullDown = cond(\n      and(\n        greaterOrEq(this.dragY, this.lastStartScrollY),\n        greaterThan(this.lastStartScrollY, 0)\n      ),\n      set(this.scrollUpAndPullDown, 1)\n    );\n\n    this.setTranslationY = cond(\n      and(\n        not(this.dragWithHandle),\n        not(greaterOrEq(this.dragY, this.lastStartScrollY))\n      ),\n      set(this.translationY, sub(this.dragY, this.lastStartScrollY)),\n      set(this.translationY, this.dragY)\n    );\n\n    this.extraOffset = cond(\n      eq(this.scrollUpAndPullDown, 1),\n      this.lastStartScrollY,\n      0\n    );\n    const endOffsetY = add(\n      this.lastSnap,\n      this.translationY,\n      multiply(1 - props.friction, this.velocityY)\n    );\n\n    this.calculateNextSnapPoint = (i = 0): Animated.Node<number> | number =>\n      i === snapPoints.length\n        ? this.tempDestSnapPoint\n        : cond(\n            greaterThan(\n              abs(sub(this.tempDestSnapPoint, endOffsetY)),\n              abs(sub(add(snapPoints[i], this.extraOffset), endOffsetY))\n            ),\n            [\n              set(this.tempDestSnapPoint, add(snapPoints[i], this.extraOffset)),\n              set(this.nextSnapIndex, i),\n              this.calculateNextSnapPoint(i + 1),\n            ],\n            this.calculateNextSnapPoint(i + 1)\n          );\n\n    const runAnimation = ({\n      clock,\n      from,\n      to,\n      position,\n      finished,\n      velocity,\n      frameTime,\n    }: TimingParams) => {\n      const state = {\n        finished,\n        velocity: new Value(0),\n        position,\n        time: new Value(0),\n        frameTime,\n      };\n\n      const timingConfig = {\n        duration: animationDuration,\n        easing:\n          (props.animationType === 'timing' && props.animationConfig?.easing) ||\n          DEFAULT_EASING,\n        toValue: new Value(0),\n      };\n\n      const springConfig = {\n        ...DEFAULT_SPRING_PARAMS,\n        ...((props.animationType === 'spring' && props.animationConfig) || {}),\n        toValue: new Value(0),\n      };\n\n      return [\n        cond(and(not(clockRunning(clock)), not(eq(finished, 1))), [\n          // If the clock isn't running, we reset all the animation params and start the clock\n          set(state.finished, 0),\n          set(state.velocity, velocity),\n          set(state.time, 0),\n          set(state.position, from),\n          set(state.frameTime, 0),\n          set(timingConfig.toValue, to),\n          set(springConfig.toValue, to),\n          startClock(clock),\n        ]),\n        // We run the step here that is going to update position\n        cond(\n          eq(animationDriver, 0),\n          timing(clock, state, timingConfig),\n          spring(clock, state, springConfig)\n        ),\n        cond(\n          state.finished,\n          [\n            call([this.nextSnapIndex], ([value]) => {\n              if (value !== this.prevSnapIndex) {\n                this.props.onSettle?.(value);\n              }\n              this.prevSnapIndex = value;\n            }),\n            // Resetting appropriate values\n            set(drawerOldGestureState, GestureState.END),\n            set(handleOldGestureState, GestureState.END),\n            set(this.prevTranslateYOffset, state.position),\n            cond(eq(this.scrollUpAndPullDown, 1), [\n              set(\n                this.prevTranslateYOffset,\n                sub(this.prevTranslateYOffset, this.lastStartScrollY)\n              ),\n              set(this.lastStartScrollY, 0),\n              set(this.scrollUpAndPullDown, 0),\n            ]),\n            cond(eq(this.destSnapPoint, snapPoints[0]), [\n              set(this.dragWithHandle, 0),\n            ]),\n            set(this.isManuallySetValue, 0),\n            set(this.manualYOffset, 0),\n            stopClock(clock),\n            this.prevTranslateYOffset,\n          ],\n          // We made the block return the updated position,\n          state.position\n        ),\n      ];\n    };\n\n    const translateYOffset = cond(\n      isAnimationInterrupted,\n      [\n        // set(prevTranslateYOffset, animationPosition) should only run if we are\n        // interrupting an animation when the drawer is currently in a different\n        // position than the top\n        cond(\n          or(\n            this.dragWithHandle,\n            greaterOrEq(abs(this.prevDragY), this.lastStartScrollY)\n          ),\n          set(this.prevTranslateYOffset, this.animationPosition)\n        ),\n        set(this.animationFinished, 1),\n        set(this.translationY, 0),\n        // Resetting appropriate values\n        set(drawerOldGestureState, GestureState.END),\n        set(handleOldGestureState, GestureState.END),\n        // By forcing that frameTime exceeds duration, it has the effect of stopping the animation\n        set(this.animationFrameTime, add(animationDuration, 1000)),\n        set(this.velocityY, 0),\n        stopClock(this.animationClock),\n        this.prevTranslateYOffset,\n      ],\n      cond(\n        or(\n          this.didGestureFinish,\n          this.isManuallySetValue,\n          clockRunning(this.animationClock)\n        ),\n        [\n          runAnimation({\n            clock: this.animationClock,\n            from: cond(\n              this.isManuallySetValue,\n              this.prevTranslateYOffset,\n              add(this.prevTranslateYOffset, this.translationY)\n            ),\n            to: this.destSnapPoint,\n            position: this.animationPosition,\n            finished: this.animationFinished,\n            frameTime: this.animationFrameTime,\n            velocity: this.velocityY,\n          }),\n        ],\n        [\n          set(this.animationFrameTime, 0),\n          set(this.animationFinished, 0),\n          // @ts-ignore\n          this.prevTranslateYOffset,\n        ]\n      )\n    );\n\n    this.translateY = interpolate(\n      add(translateYOffset, this.dragY, multiply(scrollY, -1)),\n      {\n        inputRange: [openPosition, closedPosition],\n        outputRange: [openPosition, closedPosition],\n        extrapolate: Extrapolate.CLAMP,\n      }\n    );\n\n    this.position = interpolate(this.translateY, {\n      inputRange: [openPosition, snapPoints[snapPoints.length - 1]],\n      outputRange: [1, 0],\n      extrapolate: Extrapolate.CLAMP,\n    });\n  }\n\n  private getNormalisedSnapPoints = () => {\n    return this.props.snapPoints.map(p => {\n      if (typeof p === 'string') {\n        return this.convertPercentageToDp(p);\n      } else if (typeof p === 'number') {\n        return p;\n      }\n\n      throw new Error(\n        `Invalid type for value ${p}: ${typeof p}. It should be either a percentage string or a number`\n      );\n    });\n  };\n\n  private getScrollComponent = () => {\n    switch (this.props.componentType) {\n      case 'FlatList':\n        return FlatList;\n      case 'ScrollView':\n        return ScrollView;\n      case 'SectionList':\n        return SectionList;\n      default:\n        throw new Error(\n          'Component type not supported: it should be one of `FlatList`, `ScrollView` or `SectionList`'\n        );\n    }\n  };\n\n  snapTo = (index: number) => {\n    const snapPoints = this.getNormalisedSnapPoints();\n    this.isManuallySetValue.setValue(1);\n    this.manualYOffset.setValue(snapPoints[index]);\n    this.nextSnapIndex.setValue(index);\n  };\n\n  render() {\n    const {\n      renderHandle,\n      snapPoints,\n      initialSnapIndex,\n      componentType,\n      onSettle,\n      animatedPosition,\n      containerStyle,\n      ...rest\n    } = this.props;\n    const AnimatedScrollableComponent = this.scrollComponent;\n    const normalisedSnapPoints = this.getNormalisedSnapPoints();\n    const initialSnap = normalisedSnapPoints[initialSnapIndex];\n\n    const Content = (\n      <Animated.View\n        style={[\n          StyleSheet.absoluteFillObject,\n          containerStyle,\n          // @ts-ignore\n          {\n            transform: [{ translateY: this.translateY }],\n          },\n        ]}\n      >\n        <PanGestureHandler\n          ref={this.drawerHandleRef}\n          shouldCancelWhenOutside={false}\n          simultaneousHandlers={this.masterDrawer}\n          onGestureEvent={this.onHandleGestureEvent}\n          onHandlerStateChange={this.onHandleGestureEvent}\n        >\n          <Animated.View>{renderHandle()}</Animated.View>\n        </PanGestureHandler>\n        <PanGestureHandler\n          ref={this.drawerContentRef}\n          simultaneousHandlers={[this.scrollComponentRef, this.masterDrawer]}\n          shouldCancelWhenOutside={false}\n          onGestureEvent={this.onDrawerGestureEvent}\n          onHandlerStateChange={this.onDrawerGestureEvent}\n        >\n          <Animated.View style={styles.container}>\n            <NativeViewGestureHandler\n              ref={this.scrollComponentRef}\n              waitFor={this.masterDrawer}\n              simultaneousHandlers={this.drawerContentRef}\n            >\n              <AnimatedScrollableComponent\n                overScrollMode=\"never\"\n                bounces={false}\n                {...rest}\n                ref={this.props.innerRef}\n                // @ts-ignore\n                decelerationRate={this.decelerationRate}\n                onScrollBeginDrag={this.onScrollBeginDrag}\n                scrollEventThrottle={1}\n                contentContainerStyle={[\n                  rest.contentContainerStyle,\n                  { paddingBottom: this.getNormalisedSnapPoints()[0] },\n                ]}\n              />\n            </NativeViewGestureHandler>\n          </Animated.View>\n        </PanGestureHandler>\n        {this.props.animatedPosition && (\n          <Animated.Code\n            exec={onChange(\n              this.position,\n              set(this.props.animatedPosition, this.position)\n            )}\n          />\n        )}\n        <Animated.Code\n          exec={onChange(\n            this.dragY,\n            cond(not(eq(this.dragY, 0)), set(this.prevDragY, this.dragY))\n          )}\n        />\n        <Animated.Code\n          exec={onChange(\n            this.didGestureFinish,\n            cond(this.didGestureFinish, [\n              this.didScrollUpAndPullDown,\n              this.setTranslationY,\n              set(\n                this.tempDestSnapPoint,\n                add(normalisedSnapPoints[0], this.extraOffset)\n              ),\n              set(this.nextSnapIndex, 0),\n              set(this.destSnapPoint, this.calculateNextSnapPoint()),\n              cond(\n                and(\n                  greaterThan(this.dragY, this.lastStartScrollY),\n                  this.isAndroid,\n                  not(this.dragWithHandle)\n                ),\n                call([], () => {\n                  // This prevents the scroll glide from happening on Android when pulling down with inertia.\n                  // It's not perfect, but does the job for now\n                  const { method, args } = imperativeScrollOptions[\n                    this.props.componentType\n                  ];\n                  // @ts-ignore\n                  const node = this.props.innerRef.current?.getNode();\n\n                  if (\n                    node &&\n                    node[method] &&\n                    ((this.props.componentType === 'FlatList' &&\n                      (this.props?.data?.length || 0) > 0) ||\n                      (this.props.componentType === 'SectionList' &&\n                        this.props.sections.length > 0) ||\n                      this.props.componentType === 'ScrollView')\n                  ) {\n                    node[method](args);\n                  }\n                })\n              ),\n              set(this.dragY, 0),\n              set(this.velocityY, 0),\n              set(\n                this.lastSnap,\n                sub(\n                  this.destSnapPoint,\n                  cond(\n                    eq(this.scrollUpAndPullDown, 1),\n                    this.lastStartScrollY,\n                    0\n                  )\n                )\n              ),\n              call([this.lastSnap], ([value]) => {\n                // This is the TapGHandler trick\n                // @ts-ignore\n                this.masterDrawer?.current?.setNativeProps({\n                  maxDeltaY: value - this.getNormalisedSnapPoints()[0],\n                });\n              }),\n              set(\n                this.decelerationRate,\n                cond(\n                  eq(this.isAndroid, 1),\n                  cond(\n                    eq(this.lastSnap, normalisedSnapPoints[0]),\n                    ANDROID_NORMAL_DECELERATION_RATE,\n                    0\n                  ),\n                  IOS_NORMAL_DECELERATION_RATE\n                )\n              ),\n            ])\n          )}\n        />\n        <Animated.Code\n          exec={onChange(this.isManuallySetValue, [\n            cond(\n              this.isManuallySetValue,\n              [\n                set(this.destSnapPoint, this.manualYOffset),\n                set(this.animationFinished, 0),\n                set(this.lastSnap, this.manualYOffset),\n                call([this.lastSnap], ([value]) => {\n                  // This is the TapGHandler trick\n                  // @ts-ignore\n                  this.masterDrawer?.current?.setNativeProps({\n                    maxDeltaY: value - this.getNormalisedSnapPoints()[0],\n                  });\n                }),\n              ],\n              [set(this.nextSnapIndex, 0)]\n            ),\n          ])}\n        />\n      </Animated.View>\n    );\n\n    // On Android, having an intermediary view with pointerEvents=\"box-none\", breaks the\n    // waitFor logic\n    if (Platform.OS === 'android') {\n      return (\n        <TapGestureHandler\n          maxDurationMs={100000}\n          ref={this.masterDrawer}\n          maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}\n          shouldCancelWhenOutside={false}\n        >\n          {Content}\n        </TapGestureHandler>\n      );\n    }\n\n    // On iOS, We need to wrap the content on a view with PointerEvents box-none\n    // So that we can start scrolling automatically when reaching the top without\n    // Stopping the gesture\n    return (\n      <TapGestureHandler\n        maxDurationMs={100000}\n        ref={this.masterDrawer}\n        maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}\n      >\n        <View style={StyleSheet.absoluteFillObject} pointerEvents=\"box-none\">\n          {Content}\n        </View>\n      </TapGestureHandler>\n    );\n  }\n}\n\nexport default ScrollBottomSheet;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}